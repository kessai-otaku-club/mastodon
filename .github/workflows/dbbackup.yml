name: scheduled_backup

on:
  schedule:
    - cron: 0 4 * * *
  push:

jobs:
  scheduled_backup:
    runs-on: ubuntu-latest
    steps:
    - name: debug
      env:
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_HOST: ${{ secrets.DB_HOST }}
      run: echo "${{ secrets.DB_HOST }}:5432:${{ secrets.DB_NAME }}:${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}" > ~/.pgpass && chmod 600 ~/.pgpass
    - name: Send to S3
      env:
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_HOST: ${{ secrets.DB_HOST }}
      run: echo ~/.pgpass && pg_dump -d ${DB_NAME} -U ${DB_USER} -h ${DB_HOST} -w > $(date "+%Y%m%d")_${DB_NAME}.dump
    - name: Configure AWS Credentials Action For GitHub Actions
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.S3_REGION }}
    - name: Send to S3
      env:
        AWS_S3_BACKUP_BUCKET: ${{ secrets.AWS_S3_BACKUP_BUCKET }}
        S3_ENDPOINT: ${{ secrets.S3_ENDPOINT }}
        DB_NAME: ${{ secrets.DB_NAME }}
      run: aws s3 cp $(date "+%Y%m%d")_${DB_NAME}.dump s3://${AWS_S3_BACKUP_BUCKET}/${DB_NAME}/ --endpoint-url=${S3_ENDPOINT}
    - name: Delete before 7days from s3
      env:
        AWS_S3_BACKUP_BUCKET: ${{ secrets.AWS_S3_BACKUP_BUCKET }}
        S3_ENDPOINT: ${{ secrets.S3_ENDPOINT }}
        DB_NAME: ${{ secrets.DB_NAME }}
      run: aws s3 rm s3://${AWS_S3_BACKUP_BUCKET}/${DB_NAME}/$(date '+%Y%m%d' -d '7 days ago')_${DB_NAME}.dump --endpoint-url=${S3_ENDPOINT}
    - name: Post result to mastodon
      env:
        TOKEN: ${{ secrets.MASTODON_TOKEN }}
        URL: ${{ secrets.MASTODON_DOMAIN}}
        MSG: Github Actionsによる定期投稿テスト
        VISIBILITY: unlisted
      run: |
        curl -X POST -d "status=${MSG}&visibility=${VISIBILITY}" --header "Authorization: Bearer ${TOKEN}" -sS "https://${URL}/api/v1/statuses"
      if: always()