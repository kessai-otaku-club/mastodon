name: scheduled_backup

on:
  schedule:
    - cron: 0 18 * * *

jobs:
  scheduled_backup:
    runs-on: ubuntu-latest
    steps:
    - name: Post result to mastodon
      env:
        TOKEN: ${{ secrets.MASTODON_TOKEN }}
        URL: ${{ secrets.MASTODON_DOMAIN}}
        MSG: バックアップを開始します
        VISIBILITY: unlisted
      run: |
        curl -X POST -d "status=${MSG}&visibility=${VISIBILITY}" --header "Authorization: Bearer ${TOKEN}" -sS "https://${URL}/api/v1/statuses"
    - name: db secret init
      env:
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_HOST: ${{ secrets.DB_HOST }}
      run: echo "${{ secrets.DB_HOST }}:5432:${{ secrets.DB_NAME }}:${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}" > ~/.pgpass && chmod 600 ~/.pgpass
    - name: pg_dump init
      run: sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list' && wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add - && sudo apt update && sudo apt install postgresql-client-12 -y
    - name: aws secret init
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: mkdir ~/.aws && printf "[default]\naws_access_key_id=%s\naws_secret_access_key=%s\n" ${{ secrets.AWS_ACCESS_KEY_ID }} ${{ secrets.AWS_SECRET_ACCESS_KEY }} > ~/.aws/credentials
    - name: pg_dump backup
      env:
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_HOST: ${{ secrets.DB_HOST }}
      run: pg_dump -d ${DB_NAME} -U ${DB_USER} -h ${DB_HOST} -w > $(date "+%Y%m%d")_${DB_NAME}.dump
    - name: Send to S3
      env:
        AWS_S3_BACKUP_BUCKET: ${{ secrets.AWS_S3_BACKUP_BUCKET }}
        S3_ENDPOINT: ${{ secrets.S3_ENDPOINT }}
        DB_NAME: ${{ secrets.DB_NAME }}
      run: aws s3 cp $(date "+%Y%m%d")_${DB_NAME}.dump s3://${AWS_S3_BACKUP_BUCKET}/${DB_NAME}/ --endpoint-url=${S3_ENDPOINT}
    - name: Delete before 7days from s3
      env:
        AWS_S3_BACKUP_BUCKET: ${{ secrets.AWS_S3_BACKUP_BUCKET }}
        S3_ENDPOINT: ${{ secrets.S3_ENDPOINT }}
        DB_NAME: ${{ secrets.DB_NAME }}
      run: aws s3 rm s3://${AWS_S3_BACKUP_BUCKET}/${DB_NAME}/$(date '+%Y%m%d' -d '7 days ago')_${DB_NAME}.dump --endpoint-url=${S3_ENDPOINT}
    - name: Post result to mastodon
      env:
        TOKEN: ${{ secrets.MASTODON_TOKEN }}
        URL: ${{ secrets.MASTODON_DOMAIN}}
        MSG: バックアッププロセスを完了しました
        VISIBILITY: unlisted
      run: |
        curl -X POST -d "status=${MSG}&visibility=${VISIBILITY}" --header "Authorization: Bearer ${TOKEN}" -sS "https://${URL}/api/v1/statuses"
    - name: Post result to mastodon
      env:
        TOKEN: ${{ secrets.MASTODON_TOKEN }}
        URL: ${{ secrets.MASTODON_DOMAIN}}
        MSG: バックアップに失敗しました。
        VISIBILITY: unlisted
      run: |
        curl -X POST -d "status=${MSG}%0Ahttps://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}&visibility=${VISIBILITY}" --header "Authorization: Bearer ${TOKEN}" -sS "https://${URL}/api/v1/statuses"
      if: failure()
